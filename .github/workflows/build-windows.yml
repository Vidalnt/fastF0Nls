name: Build Windows DLL
on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell
      
    - name: Install FFTW3
      run: |
        & "$env:VCPKG_ROOT\vcpkg.exe" install fftw3:x64-windows --recurse
      shell: powershell
      
    - name: Patch code for Windows compatibility
      run: |
        # Crear un parche para compatibility con MSVC
        $patchContent = @"
        #ifdef _MSC_VER
        #ifndef M_PI
        #define M_PI 3.14159265358979323846
        #endif
        #define or ||
        #define and &&
        #endif
        "@
        
        # Agregar el parche al inicio de single_pitch.cpp
        $originalContent = Get-Content "cpp\src\single_pitch.cpp" -Raw
        $patchedContent = $patchContent + "`n" + $originalContent
        Set-Content "cpp\src\single_pitch.cpp" -Value $patchedContent
        
        Write-Host "Applied Windows compatibility patch to single_pitch.cpp"
      shell: powershell
      
    - name: Verify vcpkg installation
      run: |
        Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
        Write-Host "FFTW3 installation directory (searching for fftw dlls):"
        Get-ChildItem "$env:VCPKG_ROOT\installed\x64-windows" -Recurse -Filter "*fftw*" | Select-Object FullName
      shell: powershell

    - name: Configure CMake
      run: |
        cmake -B build -S cpp `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_CXX_FLAGS="/D_USE_MATH_DEFINES /DNOMINMAX"
      shell: powershell

    - name: Build project
      run: |
        cmake --build build --config Release --verbose
      shell: powershell

    - name: List build output files
      run: |
        Write-Host "Contents of build directory (DLLs):"
        Get-ChildItem -Path "build" -Recurse -Filter "*.dll" | ForEach-Object {
          Write-Host "Found DLL: $($_.FullName)"
        }
        Write-Host "Contents of build/Release directory:"
        if (Test-Path "build\Release") {
          Get-ChildItem "build\Release" | ForEach-Object { Write-Host $_.Name }
        } else {
          Write-Host "Release directory does not exist"
        }
      shell: powershell

    - name: Create lib directory and copy DLL
      run: |
        # Create cpp\lib directory if it doesn't exist
        if (!(Test-Path "cpp\lib")) {
          New-Item -ItemType Directory -Force -Path "cpp\lib"
          Write-Host "Created cpp\lib directory"
        }

        # Find and copy the single_pitch.dll
        $dllFound = $false
        $possiblePaths = @(
          "build\Release\single_pitch.dll",
          "build\single_pitch.dll",
          "build\src\Release\single_pitch.dll"
        )

        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Copy-Item $path "cpp\lib\single_pitch.dll" -Force
            Write-Host "DLL copied from: $path"
            $dllFound = $true
            break
          }
        }

        if (-not $dllFound) {
          Write-Host "WARNING: Could not find single_pitch.dll in expected locations, listing all DLLs in build:"
          Get-ChildItem -Path "build" -Recurse -Filter "*.dll" | ForEach-Object {
            Write-Host "  $($_.FullName)"
          }
          Write-Host "Failing the step so the workflow stops (no DLL to upload)."
          exit 1
        }
      shell: powershell

    - name: Copy fftw3.dll next to single_pitch.dll
      run: |
        $src = Join-Path $env:VCPKG_ROOT "installed\x64-windows\bin\fftw3.dll"
        if (Test-Path $src) {
          Copy-Item $src -Destination "cpp\lib\fftw3.dll" -Force
          Write-Host "Copied fftw3.dll to cpp\lib"
        } else {
          Write-Host "fftw3.dll not found at $src"
          Get-ChildItem "$env:VCPKG_ROOT" -Recurse -Filter "fftw3*.dll" | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }
      shell: powershell

    - name: Verify final DLL (safe dumpbin lookup)
      run: |
        if (Test-Path "cpp\lib\single_pitch.dll") {
          $fileInfo = Get-Item "cpp\lib\single_pitch.dll"
          Write-Host "✅ DLL created successfully:"
          Write-Host "  Path: $($fileInfo.FullName)"
          Write-Host "  Size: $($fileInfo.Length) bytes"
          Write-Host "  Modified: $($fileInfo.LastWriteTime)"

          # Intent: try to locate dumpbin.exe robustly without failing the job if not found
          $dumpbin = $null

          # 1) Try Get-Command (if dumpbin is on PATH)
          $cmd = Get-Command dumpbin -ErrorAction SilentlyContinue
          if ($cmd) {
            $dumpbin = $cmd.Source
          }

          # 2) Use vswhere to find Visual Studio installation and locate dumpbin
          if (-not $dumpbin) {
            $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            if (Test-Path $vswherePath) {
              try {
                $vsInstall = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath 2>$null
                if ($vsInstall) {
                  $msvcRoot = Get-ChildItem "$vsInstall\VC\Tools\MSVC" -Directory -ErrorAction SilentlyContinue | Sort-Object Name -Descending | Select-Object -First 1
                  if ($msvcRoot) {
                    $candidate = Join-Path $msvcRoot.FullName "bin\Hostx64\x64\dumpbin.exe"
                    if (Test-Path $candidate) { $dumpbin = $candidate }
                  }
                }
              } catch {
                Write-Host "vswhere failed or returned nothing: $_"
              }
            }
          }

          # 3) Check common Visual Studio locations (wildcard search)
          if (-not $dumpbin) {
            $candidates = @(
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\*\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\*\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
            )
            foreach ($pat in $candidates) {
              $found = Get-ChildItem -Path $pat -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($found) { $dumpbin = $found.FullName; break }
            }
          }

          if ($dumpbin) {
            Write-Host "Using dumpbin at: $dumpbin"
            try {
              & $dumpbin /dependents "cpp\lib\single_pitch.dll" 2>&1 | ForEach-Object { Write-Host $_ }
            } catch {
              Write-Host "Failed to run dumpbin, but build will not be marked failed. Error: $_"
            }
          } else {
            Write-Host "dumpbin not found on runner. Skipping dependency dump. (This is informational only.)"
          }
        } else {
          Write-Host "❌ ERROR: Final DLL not found"
          exit 1
        }
      shell: powershell

    - name: Upload Windows DLL artifact (includes FFTW dependency)
      uses: actions/upload-artifact@v4
      with:
        name: fastF0Nls-windows-dll
        path: cpp/lib
        retention-days: 30
        if-no-files-found: error
