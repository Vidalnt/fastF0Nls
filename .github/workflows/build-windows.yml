name: Build Windows DLL
on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
      VCPKG_DEFAULT_TRIPLET: x64-windows
      
    steps:
    - name: üì¶ Checkout repository
      uses: actions/checkout@v4

    - name: üß∞ Setup build environment
      run: |
        # Crear directorio para builds
        New-Item -Path "build" -ItemType Directory -Force | Out-Null
        
        # Configurar variables de entorno
        echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "FFTW_INCLUDE_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows\include" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "FFTW_LIBRARY=${{ github.workspace }}\vcpkg\installed\x64-windows\lib\fftw3.lib" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    - name: üì¶ Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install
      shell: powershell

    - name: üîß Install FFTW3 dependencies
      run: |
        .\vcpkg\vcpkg install fftw3:x64-windows --recurse
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to install FFTW3 dependencies"
          exit 1
        }
      shell: powershell
      id: fftw-install

    - name: üõ†Ô∏è Apply Windows compatibility patches
      id: apply-patches
      run: |
        # Definir el encabezado del parche una sola vez
        $patchHeader = @"
#ifdef _MSC_VER
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#define or ||
#define and &&
#include <cmath>
#include <algorithm>
using std::min;
using std::max;
#endif

"@

        # Lista de todos los archivos que necesitan el parche
        $filesToPatch = @(
          "cpp\src\single_pitch.cpp",
          "cpp\src\th.cpp",
          "cpp\src\tools.cpp",
          "cpp\src\vector.cpp"
        )

        # Iterar sobre cada archivo y aplicar el parche si es necesario
        foreach ($file in $filesToPatch) {
          if (Test-Path $file) {
            $content = Get-Content $file -Raw
            
            # Prevenir la aplicaci√≥n del parche si ya existe una marca (opcional pero recomendado)
            if ($content.StartsWith("#ifdef _MSC_VER")) {
                Write-Host "Patch likely already applied to $file, skipping."
                continue
            }

            # Aplicar el parche al inicio del contenido
            $patchedContent = $patchHeader + $content
            Set-Content -Path $file -Value $patchedContent -Encoding UTF8
            Write-Host "Patched for Windows compatibility: $file"
          }
          else {
            Write-Warning "File not found, skipping patch: $file"
          }
        }
        
        Write-Host "Finished applying Windows compatibility patches."
      shell: powershell

    - name: üîç Configure CMake
      run: |
        cmake -S cpp -B build `
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE `
          -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<1:$<STREQUAL:${CMAKE_BUILD_TYPE},Debug>:Debug>" `
          -DCMAKE_CXX_FLAGS="/D_USE_MATH_DEFINES /DNOMINMAX /W3 /EHsc" `
          -G "Visual Studio 17 2022" -A x64
      shell: powershell
      id: cmake-config

    - name: ‚öôÔ∏è Build project
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} --target single_pitch --verbose
        if ($LASTEXITCODE -ne 0) {
          Write-Error "CMake build failed"
          exit 1
        }
      shell: powershell
      id: build

    - name: üìÅ Verify and copy DLL
      run: |
        $dllPath = "build\${{ env.BUILD_TYPE }}\single_pitch.dll"
        if (-not (Test-Path $dllPath)) {
          # Intentar encontrar el DLL en otros lugares comunes
          $possiblePaths = @(
            "build\src\${{ env.BUILD_TYPE }}\single_pitch.dll",
            "build\single_pitch.dll",
            "build\src\single_pitch.dll"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $dllPath = $path
              break
            }
          }
        }
        
        if (-not (Test-Path $dllPath)) {
          Write-Error "Failed to locate single_pitch.dll after build"
          Get-ChildItem -Path build -Recurse -Include *.dll | ForEach-Object {
            Write-Host "Found DLL: $($_.FullName)"
          }
          exit 1
        }
        
        # Crear directorio lib si no existe
        $libDir = "cpp\lib"
        if (-not (Test-Path $libDir)) {
          New-Item -ItemType Directory -Path $libDir | Out-Null
        }
        
        # Copiar el DLL
        Copy-Item -Path $dllPath -Destination "${libDir}\single_pitch.dll" -Force
        Write-Host "‚úÖ DLL successfully copied to ${libDir}\single_pitch.dll"
        
        # Verificar tama√±o del DLL
        $dllSize = (Get-Item "${libDir}\single_pitch.dll").Length
        if ($dllSize -lt 100KB) {
          Write-Warning "DLL size is suspiciously small ($($dllSize/1KB) KB) - might be incomplete"
        }
        else {
          Write-Host "DLL size: $($dllSize/1KB) KB"
        }
      shell: powershell
      id: verify-dll

    - name: üîé Dependency check
      run: |
        $dumpbinPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
        $resolvedPath = Resolve-Path $dumpbinPath -ErrorAction SilentlyContinue
        
        if ($resolvedPath) {
          Write-Host "Using dumpbin from: $resolvedPath"
          & $resolvedPath /dependents "cpp\lib\single_pitch.dll"
        }
        else {
          Write-Host "‚ö†Ô∏è dumpbin not found - skipping dependency check"
          Write-Host "DLL file exists, build likely successful"
        }
      shell: powershell
      if: success()

    - name: üì§ Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: fastF0Nls-windows-dll
        path: cpp/lib/single_pitch.dll
        retention-days: 30
        if-no-files-found: error
      if: success()
