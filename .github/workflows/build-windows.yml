name: Build Windows DLL
on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell
      
    - name: Install FFTW3
      run: |
        & "$env:VCPKG_ROOT\vcpkg.exe" install fftw3:x64-windows --recurse
      shell: powershell
      
    - name: Patch code for Windows compatibility
      run: |
        # Leer el archivo original
        $filePath = "cpp\src\single_pitch.cpp"
        $content = Get-Content $filePath -Raw
        
        # Agregar includes y definiciones necesarias al inicio
        $patchHeader = @"
#ifdef _MSC_VER
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#define or ||
#define and &&
#include <cmath>
#include <algorithm>
using std::min;
using std::max;
#endif

"@
        
        # Aplicar el parche
        $patchedContent = $patchHeader + $content
        Set-Content $filePath -Value $patchedContent -Encoding UTF8
        
        # También parchear otros archivos si es necesario
        $filesToPatch = @("cpp\src\th.cpp", "cpp\src\tools.cpp", "cpp\src\vector.cpp")
        foreach ($file in $filesToPatch) {
          if (Test-Path $file) {
            $fileContent = Get-Content $file -Raw
            $patchedFileContent = $patchHeader + $fileContent
            Set-Content $file -Value $patchedFileContent -Encoding UTF8
            Write-Host "Patched: $file"
          }
        }
        
        Write-Host "Applied Windows compatibility patches"
      shell: powershell
      
    - name: Verify vcpkg installation
      run: |
        Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
        Write-Host "FFTW3 installation directory:"
        Get-ChildItem "$env:VCPKG_ROOT\installed\x64-windows" -Recurse -Filter "*fftw*" | Select-Object FullName
      shell: powershell
      
    - name: Configure CMake
      run: |
        cmake -B build -S cpp `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_CXX_FLAGS="/D_USE_MATH_DEFINES /DNOMINMAX"
      shell: powershell
      
    - name: Build project
      run: |
        cmake --build build --config Release --verbose
      shell: powershell
      
    - name: List build output files
      run: |
        Write-Host "Contents of build directory:"
        Get-ChildItem -Path "build" -Recurse -Filter "*.dll" | ForEach-Object { 
          Write-Host "Found DLL: $($_.FullName)"
        }
        Write-Host "Contents of build/Release directory:"
        if (Test-Path "build\Release") {
          Get-ChildItem "build\Release" | ForEach-Object { Write-Host $_.Name }
        } else {
          Write-Host "Release directory does not exist"
        }
      shell: powershell
      
    - name: Create lib directory and copy DLL
      run: |
        # Create lib directory if it doesn't exist
        if (!(Test-Path "cpp\lib")) {
          New-Item -ItemType Directory -Force -Path "cpp\lib"
          Write-Host "Created cpp\lib directory"
        }
        
        # Find and copy the DLL
        $dllFound = $false
        $possiblePaths = @(
          "build\Release\single_pitch.dll",
          "build\single_pitch.dll",
          "build\src\Release\single_pitch.dll"
        )
        
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Copy-Item $path "cpp\lib\single_pitch.dll"
            Write-Host "DLL copied from: $path"
            $dllFound = $true
            break
          }
        }
        
        if (!$dllFound) {
          Write-Host "ERROR: Could not find single_pitch.dll in expected locations"
          Write-Host "Searching entire build directory for DLL files:"
          Get-ChildItem -Path "build" -Recurse -Filter "*.dll" | ForEach-Object { 
            Write-Host "  $($_.FullName)"
          }
          exit 1
        }
      shell: powershell
      
    - name: Verify final DLL
      run: |
        if (Test-Path "cpp\lib\single_pitch.dll") {
          $fileInfo = Get-Item "cpp\lib\single_pitch.dll"
          Write-Host "✅ DLL created successfully:"
          Write-Host "  Path: $($fileInfo.FullName)"
          Write-Host "  Size: $($fileInfo.Length) bytes"
          Write-Host "  Modified: $($fileInfo.LastWriteTime)"
          
          # Check DLL dependencies using full path to dumpbin
          Write-Host "Checking DLL dependencies:"
          $dumpbinPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx64\x64\dumpbin.exe"
          if (Test-Path $dumpbinPath) {
            & $dumpbinPath /dependents "cpp\lib\single_pitch.dll"
          } else {
            Write-Host "dumpbin not found at expected path, skipping dependency check"
            Write-Host "DLL file exists and has reasonable size, build appears successful"
          }
        } else {
          Write-Host "❌ ERROR: Final DLL not found"
          exit 1
        }
      shell: powershell
      
    - name: Upload Windows DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: fastF0Nls-windows-dll
        path: cpp/lib/single_pitch.dll
        retention-days: 30
        if-no-files-found: error
